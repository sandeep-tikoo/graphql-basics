   
    type Query  {
        users(query: String): [User!]!
        posts(query: String): [Post!]!
        comments(query: String): [Comment!]!
        me(id: ID): User!
        post: Post!
    }

    type Mutation   {
        createUser(data: CreateUserInput): User!
        createPost(data: CreatePostInput): Post!
        createComment(data: CreateCommentInput): Comment!

        deleteUser(id: ID!): User!
        deletePost(id: ID!): Post!
        deleteComment(id: ID!): Comment!

        updateUser(id: ID!, data: UpdateUserInput): User!
        updatePost(id: ID!, data: UpdatePostInput): Post!
        updateComment(id: ID!, data: UpdateCommentInput): Comment!
    }

    type Subscription {
        # Count: {count: Int!, second: Int, minute: Int, hour: Int}
        count: Int!
        second: Int!
        minute: Int
        hour: Int
    }
    

    input CreateUserInput {
        name: String!
        email: String!
        age: Int
    }

    input UpdateUserInput {
        name: String
        email: String
        age: Int
    }

    input CreatePostInput {
        title: String!
        body: String!
        published: Boolean!
        author: ID!
    }

    input UpdatePostInput {
        title: String
        body: String
        published: Boolean
    }

    input CreateCommentInput {
        text: String!
        author: ID!
        post: ID!
    }

    input UpdateCommentInput {
        text: String
    }

    type User   {
        id: ID!
        name: String!
        email: String!
        age: Int
        posts: [Post!]!
        comments: [Comment!]!
    }

    type Post   {
        id: ID!
        title: String!
        body: String!
        published: Boolean!
        author: User!
        comments: [Comment!]!
    }

    type Comment    {
        id: ID!
        text: String!
        author: User!
        post: Post!
    }